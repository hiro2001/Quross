#include "mbed.h"
#define ON 1
#define OFF 0

Serial serial_servo(p9,p10);
Serial pc(USBTX,USBRX);

unsigned short mask_h = 65408; //マスク処理上8bits(0b1111111110000000)
unsigned short mask_l = 127;   //マスク処理下8bits(0b0000000001111111)

char ch,flag_open_crawl,flag_close,flag_set,flag_flip,flag_end,flag_stand;
int i,j,k,n,first,second,third,p=1;
int open_count=0,cnt=0;
unsigned char tx[3];
unsigned char rx[10];
int open_crawl_max=10;
int crawl_max=100;

int open_crawl[10][12]={
{8780,7600,10277,8780,7600,10277,8780,7600,10277,8780,7600,10277},
{8741,7600,10260,8741,7600,10260,8741,7600,10260,8741,7600,10260},
{8701,7600,10243,8701,7600,10243,8701,7600,10243,8701,7600,10243},
{8662,7600,10225,8662,7600,10225,8662,7600,10225,8662,7600,10225},
{8622,7600,10207,8622,7600,10207,8622,7600,10207,8622,7600,10207},
{8583,7600,10188,8583,7600,10188,8583,7600,10188,8583,7600,10188},
{8544,7600,10169,8544,7600,10169,8544,7600,10169,8544,7600,10169},
{8505,7600,10150,8505,7600,10150,8505,7600,10150,8505,7600,10150},
{8466,7600,10130,8466,7600,10130,8466,7600,10130,8466,7600,10130},
{8428,7600,10110,8428,7600,10110,8428,7600,10110,8428,7600,10110}
};

int crawl[100][12]={{8092,7044,9421,8428,7266,10339,8447,7464,10222,8192,7200,9621},
{8167,7069,9482,8424,7249,10347,8446,7479,10210,8204,7214,9641},
{8253,7105,9562,8419,7231,10355,8445,7495,10198,8216,7228,9661},
{8347,7152,9656,8414,7213,10363,8443,7510,10186,8228,7241,9681},
{8443,7208,9759,8409,7196,10370,8442,7526,10174,8240,7255,9700},
{8539,7271,9870,8403,7178,10377,8439,7541,10162,8251,7269,9719},
{8629,7342,9982,8397,7160,10383,8437,7556,10149,8262,7282,9738},
{8708,7420,10093,8390,7142,10390,8434,7571,10136,8272,7296,9757},
{8773,7506,10198,8383,7124,10396,8431,7585,10123,8283,7310,9775},
{8820,7600,10293,8375,7106,10402,8428,7600,10110,8293,7323,9794},
{8845,7701,10376,8367,7087,10407,8424,7615,10096,8302,7337,9812},
{8846,7805,10444,8358,7069,10412,8420,7629,10082,8312,7350,9829},
{8821,7911,10494,8349,7050,10417,8415,7643,10068,8321,7363,9847},
{8773,8011,10526,8340,7032,10422,8410,7658,10054,8329,7377,9864},
{8704,8101,10541,8330,7013,10426,8405,7672,10039,8338,7390,9881},
{8620,8176,10541,8319,6994,10430,8400,7686,10024,8346,7404,9898},
{8528,8232,10529,8308,6976,10434,8394,7700,10009,8354,7418,9915},
{8435,8269,10506,8297,6957,10437,8388,7714,9994,8361,7431,9931},
{8348,8285,10477,8285,6938,10440,8382,7728,9979,8368,7445,9947},
{8272,8281,10443,8272,6919,10443,8375,7741,9963,8375,7459,9963},
{8285,8262,10440,8348,6915,10477,8368,7755,9947,8382,7472,9979},
{8297,8243,10437,8435,6931,10506,8361,7769,9931,8388,7486,9994},
{8308,8224,10434,8528,6968,10529,8354,7782,9915,8394,7500,10009},
{8319,8206,10430,8620,7024,10541,8346,7796,9898,8400,7514,10024},
{8330,8187,10426,8704,7099,10541,8338,7810,9881,8405,7528,10039},
{8340,8168,10422,8773,7189,10526,8329,7823,9864,8410,7542,10054},
{8349,8150,10417,8821,7289,10494,8321,7837,9847,8415,7557,10068},
{8358,8131,10412,8846,7395,10444,8312,7850,9829,8420,7571,10082},
{8367,8113,10407,8845,7499,10376,8302,7863,9812,8424,7585,10096},
{8375,8094,10402,8820,7600,10293,8293,7877,9794,8428,7600,10110},
{8383,8076,10396,8773,7694,10198,8283,7890,9775,8431,7615,10123},
{8390,8058,10390,8708,7780,10093,8272,7904,9757,8434,7629,10136},
{8397,8040,10383,8629,7858,9982,8262,7918,9738,8437,7644,10149},
{8403,8022,10377,8539,7929,9870,8251,7931,9719,8439,7659,10162},
{8409,8004,10370,8443,7992,9759,8240,7945,9700,8442,7674,10174},
{8414,7987,10363,8347,8048,9656,8228,7959,9681,8443,7690,10186},
{8419,7969,10355,8253,8095,9562,8216,7972,9661,8445,7705,10198},
{8424,7951,10347,8167,8131,9482,8204,7986,9641,8446,7721,10210},
{8428,7934,10339,8092,8156,9421,8192,8000,9621,8447,7736,10222},
{8432,7917,10331,8030,8166,9379,8179,8014,9600,8447,7752,10233},
{8435,7900,10322,8047,8149,9403,8166,8029,9579,8447,7768,10244},
{8438,7883,10313,8063,8133,9426,8152,8043,9558,8447,7784,10254},
{8440,7866,10304,8079,8118,9449,8138,8057,9537,8447,7800,10265},
{8442,7849,10295,8094,8102,9471,8124,8072,9515,8446,7816,10275},
{8444,7833,10285,8109,8087,9493,8109,8087,9493,8444,7833,10285},
{8446,7816,10275,8124,8072,9515,8094,8102,9471,8442,7849,10295},
{8447,7800,10265,8138,8057,9537,8079,8118,9449,8440,7866,10304},
{8447,7784,10254,8152,8043,9558,8063,8133,9426,8438,7883,10313},
{8447,7768,10244,8166,8029,9579,8047,8149,9403,8435,7900,10322},
{8447,7752,10233,8179,8014,9600,8030,8166,9379,8432,7917,10331},
{8447,7736,10222,8192,8000,9621,8092,8156,9421,8428,7934,10339},
{8446,7721,10210,8204,7986,9641,8167,8131,9482,8424,7951,10347},
{8445,7705,10198,8216,7972,9661,8253,8095,9562,8419,7969,10355},
{8443,7690,10186,8228,7959,9681,8347,8048,9656,8414,7987,10363},
{8442,7674,10174,8240,7945,9700,8443,7992,9759,8409,8004,10370},
{8439,7659,10162,8251,7931,9719,8539,7929,9870,8403,8022,10377},
{8437,7644,10149,8262,7918,9738,8629,7858,9982,8397,8040,10383},
{8434,7629,10136,8272,7904,9757,8708,7780,10093,8390,8058,10390},
{8431,7615,10123,8283,7890,9775,8773,7694,10198,8383,8076,10396},
{8428,7600,10110,8293,7877,9794,8820,7600,10293,8375,8094,10402},
{8424,7585,10096,8302,7863,9812,8845,7499,10376,8367,8113,10407},
{8420,7571,10082,8312,7850,9829,8846,7395,10444,8358,8131,10412},
{8415,7557,10068,8321,7837,9847,8821,7289,10494,8349,8150,10417},
{8410,7542,10054,8329,7823,9864,8773,7189,10526,8340,8168,10422},
{8405,7528,10039,8338,7810,9881,8704,7099,10541,8330,8187,10426},
{8400,7514,10024,8346,7796,9898,8620,7024,10541,8319,8206,10430},
{8394,7500,10009,8354,7782,9915,8528,6968,10529,8308,8224,10434},
{8388,7486,9994,8361,7769,9931,8435,6931,10506,8297,8243,10437},
{8382,7472,9979,8368,7755,9947,8348,6915,10477,8285,8262,10440},
{8375,7459,9963,8375,7741,9963,8272,6919,10443,8272,8281,10443},
{8368,7445,9947,8382,7728,9979,8285,6938,10440,8348,8285,10477},
{8361,7431,9931,8388,7714,9994,8297,6957,10437,8435,8269,10506},
{8354,7418,9915,8394,7700,10009,8308,6976,10434,8528,8232,10529},
{8346,7404,9898,8400,7686,10024,8319,6994,10430,8620,8176,10541},
{8338,7390,9881,8405,7672,10039,8330,7013,10426,8704,8101,10541},
{8329,7377,9864,8410,7658,10054,8340,7032,10422,8773,8011,10526},
{8321,7363,9847,8415,7643,10068,8349,7050,10417,8821,7911,10494},
{8312,7350,9829,8420,7629,10082,8358,7069,10412,8846,7805,10444},
{8302,7337,9812,8424,7615,10096,8367,7087,10407,8845,7701,10376},
{8293,7323,9794,8428,7600,10110,8375,7106,10402,8820,7600,10293},
{8283,7310,9775,8431,7585,10123,8383,7124,10396,8773,7506,10198},
{8272,7296,9757,8434,7571,10136,8390,7142,10390,8708,7420,10093},
{8262,7282,9738,8437,7556,10149,8397,7160,10383,8629,7342,9982},
{8251,7269,9719,8439,7541,10162,8403,7178,10377,8539,7271,9870},
{8240,7255,9700,8442,7526,10174,8409,7196,10370,8443,7208,9759},
{8228,7241,9681,8443,7510,10186,8414,7213,10363,8347,7152,9656},
{8216,7228,9661,8445,7495,10198,8419,7231,10355,8253,7105,9562},
{8204,7214,9641,8446,7479,10210,8424,7249,10347,8167,7069,9482},
{8192,7200,9621,8447,7464,10222,8428,7266,10339,8092,7044,9421},
{8179,7186,9600,8447,7448,10233,8432,7283,10331,8030,7034,9379},
{8166,7171,9579,8447,7432,10244,8435,7300,10322,8047,7051,9403},
{8152,7157,9558,8447,7416,10254,8438,7317,10313,8063,7067,9426},
{8138,7143,9537,8447,7400,10265,8440,7334,10304,8079,7082,9449},
{8124,7128,9515,8446,7384,10275,8442,7351,10295,8094,7098,9471},
{8109,7113,9493,8444,7367,10285,8444,7367,10285,8109,7113,9493},
{8094,7098,9471,8442,7351,10295,8446,7384,10275,8124,7128,9515},
{8079,7082,9449,8440,7334,10304,8447,7400,10265,8138,7143,9537},
{8063,7067,9426,8438,7317,10313,8447,7416,10254,8152,7157,9558},
{8047,7051,9403,8435,7300,10322,8447,7432,10244,8166,7171,9579},
{8030,7034,9379,8432,7283,10331,8447,7448,10233,8179,7186,9600}};

void pc_command()
{
    ch = pc.getc();
    pc.putc(ch);
}

unsigned short servo_position(unsigned char id,int pos){
    tx[0] = 0x80|id;
    tx[1] = (unsigned char)((pos & mask_h)>>7);
    tx[2] = (unsigned char)(pos & mask_l);
    wait_ms(2);
    for(j=0;j<3;j++){
        serial_servo.putc(tx[j]);
    }
    return 0;
}

unsigned short servo_speed(unsigned char id,int speed){
        tx[0] = 0xC0|id;
        tx[1] = 0x02;
        tx[2] = 0x00|speed;        
        for(i=0;i<3;i++){
            serial_servo.putc(tx[i]);
        }
        return 0;
}

void close_motion(){
    for(j=1;j<13;j++){
        servo_speed(j,30);
    }
    servo_position(1,10167);
    servo_position(4,10167);
    servo_position(7,10167);
    servo_position(10,10167);
    wait_ms(500);
    servo_position(2,7600);
    servo_position(5,7600);
    servo_position(8,7600);
    servo_position(11,7600);
    wait_ms(500);
    servo_position(3,11500);
    servo_position(6,11500);
    servo_position(9,11500);
    servo_position(12,11500);
    wait_ms(2000);
    servo_position(2,4933);
    servo_position(5,4933);
    servo_position(8,4933);
    servo_position(11,4933);
}

void open_motion_crawl(){
    for(j=1;j<13;j++){
        servo_speed(j,50);
    }
    servo_position(2,7600);
    servo_position(5,7600);
    servo_position(8,7600);
    servo_position(11,7600);
    wait_ms(500);
    
    servo_position(3,10294);
    servo_position(6,10294);
    servo_position(9,10294);
    servo_position(12,10294);
    wait_ms(60);
    
    servo_position(1,8820);
    servo_position(4,8820);
    servo_position(7,8820);
    servo_position(10,8820);
    wait_ms(100);
    
    while(open_count<open_crawl_max){
        servo_position(10,open_crawl[open_count][0]);
        servo_position(11,open_crawl[open_count][1]);
        servo_position(12,open_crawl[open_count][2]);
        servo_position(1,open_crawl[open_count][3]);
        servo_position(2,open_crawl[open_count][4]);
        servo_position(3,open_crawl[open_count][5]);
        servo_position(7,open_crawl[open_count][6]);
        servo_position(8,open_crawl[open_count][7]);
        servo_position(9,open_crawl[open_count][8]);
        servo_position(4,open_crawl[open_count][9]);
        servo_position(5,open_crawl[open_count][10]);
        servo_position(6,open_crawl[open_count][11]);
        open_count++;
    }
    open_count=0;
}

void stand_set_motion(){
    for(j=1;j<13;j++){
        servo_speed(j,30);

    }
    servo_position(2,7500);
    servo_position(5,7500);
    servo_position(8,7500);
    servo_position(11,7500);
    wait_ms(500);
    /*
    servo_position(3,11500);
    servo_position(6,11500);
    servo_position(9,11500);
    servo_position(12,11500);
    */
    servo_position(1,9870);
    servo_position(3,10922);
    servo_position(4,9870);
    servo_position(6,10922);
    servo_position(7,9870);
    servo_position(9,10922);
    servo_position(10,9870);
    servo_position(12,10922);
    wait_ms(500);
}

void stand_motion(){
    for(j=1;j<13;j++){
        servo_speed(j,30);
    }
    
    servo_position(1,9870);
    servo_position(3,8922);
    servo_position(4,9870);
    servo_position(6,8922);
    servo_position(7,9870);
    servo_position(9,8922);
    servo_position(10,9870);
    servo_position(12,8922);
    wait_ms(500);
    
    //付け根
    servo_position(1,6820);
    servo_position(4,6820);
    servo_position(7,6820);
    servo_position(10,6820);
    wait_ms(500);
    //足先
    servo_position(3,4922);
    servo_position(6,4922);
    servo_position(9,4922);
    servo_position(12,4922);
    wait_ms(500);
    
    servo_position(1,7820);
    servo_position(3,5522);
    servo_position(4,7820);
    servo_position(6,5522);
    servo_position(7,7820);
    servo_position(9,5522);
    servo_position(10,7820);
    servo_position(12,5522);
    wait_ms(1000);
}

void stand_close(){
    for(j=1;j<13;j++){
        servo_speed(j,30);
    }    
    //付け根
    servo_position(1,6820);
    servo_position(4,6820);
    servo_position(7,6820);
    servo_position(10,6820);
    wait_ms(500);
    
    servo_position(3,8922);
    servo_position(6,8922);
    servo_position(9,8922);
    servo_position(12,8922);
    wait_ms(100);
    servo_position(1,9870);
    servo_position(4,9870);
    servo_position(7,9870);
    servo_position(10,9870);
    wait_ms(100);
    servo_position(2,7500);
    servo_position(5,7500);
    servo_position(8,7500);
    servo_position(11,7500);
    wait_ms(100);
    servo_position(1,10167);
    servo_position(4,10167);
    servo_position(7,10167);
    servo_position(10,10167);
    servo_position(2,7600);
    servo_position(5,7600);
    servo_position(8,7600);
    servo_position(11,7600);
    servo_position(3,11500);
    servo_position(6,11500);
    servo_position(9,11500);
    servo_position(12,11500);
    wait_ms(2000);
    servo_position(2,4933);
    servo_position(5,4933);
    servo_position(8,4933);
    servo_position(11,4933);
}

void set_motion(){
    for(j=1;j<13;j++){
        servo_speed(j,30);
    }
    servo_position(2,7500);
    wait_ms(2);
    servo_position(5,7500);
    wait_ms(2);
    servo_position(11,7500);
    wait_ms(500);
    
    servo_position(1,9870);
    wait_ms(2);
    servo_position(3,8922);
    wait_ms(2);
}

void flip_motion(){
    for(j=1;j<13;j++){
        servo_speed(j,50);
    }
    first = 8158;
    second = 7600;
    third = 9116;
    
    servo_position(4,first);
    wait_ms(2);
    servo_position(5,second);
    wait_ms(2);
    servo_position(6,third);
    wait_ms(2);
    servo_position(10,first);
    wait_ms(2);
    servo_position(11,second);
    wait_ms(2);
    servo_position(12,third);
    wait_ms(1000);
    
    servo_position(3,7500);
    wait_ms(500);
    
    servo_position(1,first);
    wait_ms(2);
    servo_position(2,second);
    wait_ms(2);
    servo_position(3,third);
    wait_ms(500);
    
    servo_position(1,8907);
    wait_ms(2);
    servo_position(3,10563);
    wait_ms(2);
    servo_position(8,7500);
    wait_ms(500);
    servo_position(7,8907);
    wait_ms(2);
    servo_position(9,10563);
    wait_ms(2);
}

void end_motion(){
    for(j=1;j<13;j++){
        servo_speed(j,30);
    }
    first = 9459;
    third = 10495;
    
    servo_position(4,first);
    wait_ms(2);
    servo_position(6,third);
    wait_ms(2);
    servo_position(10,first);
    wait_ms(2);
    servo_position(12,third);
    wait_ms(300);
    
    first = 8907;
    third = 10565;
    
    servo_position(4,first);
    wait_ms(2);
    servo_position(6,third);
    wait_ms(2);
    servo_position(10,first);
    wait_ms(2);
    servo_position(12,third);
    wait_ms(1000);
}

void crawl_motion(){
    for(j=1;j<13;j++){
        servo_speed(j,70);
    }
    while(cnt<crawl_max){
        servo_position(10,crawl[cnt][0]);
        //servo_current(0xc0);
        servo_position(11,crawl[cnt][1]);
        servo_position(12,crawl[cnt][2]);
        servo_position(1,crawl[cnt][3]);
        servo_position(2,crawl[cnt][4]);
        servo_position(3,crawl[cnt][5]);
        servo_position(7,crawl[cnt][6]);
        servo_position(8,crawl[cnt][7]);
        servo_position(9,crawl[cnt][8]);
        servo_position(4,crawl[cnt][9]);
        servo_position(5,crawl[cnt][10]);
        servo_position(6,crawl[cnt][11]);
        cnt++;
    }
    cnt=0;
}

int main(){
    wait_ms(500);
    serial_servo.baud(115200);
    serial_servo.format(8,Serial::Even,1);
    pc.baud(115200);
    pc.format(8,Serial::None,1);
    pc.printf("key:");
    pc.attach(pc_command,Serial::RxIrq);
    
    while(1){
        switch(ch){
            case 'c':
            close_motion();
            wait_ms(20);
            ch = 0;
            flag_close = ON;
            flag_set = OFF;
            break;
            
            case 'o':
            if(flag_close==ON){
                open_motion_crawl();
                wait_ms(20);
                flag_close=OFF;
                flag_open_crawl=ON;
            }
            ch=0;
            break;
            
            case '1':
            if(flag_close == ON){
                set_motion();
                wait_ms(20);
                flag_set = ON;
                flag_close = OFF;
            }
            ch = 0;
            break;
            
            case '2':
            if(flag_set == ON){
                flip_motion();
                wait_ms(20);
                flag_set = OFF;
                flag_flip = ON;
            }
            ch = 0;
            break;
            
            case '3':
            if(flag_flip == ON){
                end_motion();
                wait_ms(20);
                flag_flip = OFF;
                flag_end = ON;
            }
            ch = 0;
            break;
            
            case '4':
            if(flag_close == ON){
                stand_set_motion();
                wait_ms(20);
                flag_stand = ON;
                flag_close = OFF;
            }
            ch = 0;
            break;
            
            case '5':
            if(flag_stand == ON){
                stand_motion();
                wait_ms(20);
                flag_stand = ON;
            }
            ch = 0;
            break;
            
            case '6':
            if(flag_stand == ON){
                stand_close();
                wait_ms(20);
                flag_close = ON;
                flag_stand = OFF;
            }
            ch = 0;
            break;
            
             case 'w':
            if(flag_open_crawl==ON){
                crawl_motion();
                wait_ms(20);
            }
            ch=0;
            break;
            
            default:
            break;
        }
    }
}